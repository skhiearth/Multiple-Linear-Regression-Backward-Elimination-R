install.packages("ggplot2")
install.packages("prettydoc")
library(prettydoc)
unlink('Desktop/Analysing historical voting of the United Nations General Assembly/UN General Assembly_cache', recursive = TRUE)
q()
#Importing and installing required libraries
library(dplyr)
library(ggplot2)
# Loading dataset
load("~/Desktop/Analysing historical voting of the United Nations General Assembly/Dataset/UN-73new.RData")
head(completeVotes)
filteredVotes <- completeVotes %>% filter(vote %in% c("1", "2", "3"))
year_by_yearYes <- filteredVotes %>% group_by(year) %>% summarize(PercentageofYes = mean(vote == 1) * 100)
years <- c("1946", "1950", "1960", "1970", "1980", "1990", "2000", "2010", "2018")
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years)
#Importing and installing required libraries
library(dplyr)
library(ggplot2)
# Loading dataset
load("~/Desktop/Analysing historical voting of the United Nations General Assembly/Dataset/UN-73new.RData")
head(completeVotes)
filteredVotes <- completeVotes %>% filter(vote %in% c("1", "2", "3"))
year_by_yearYes <- filteredVotes %>% group_by(year) %>% summarize(PercentageofYes = mean(vote == 1) * 100)
years <- c("1946", "1950", "1960", "1970", "1980", "1990", "2000", "2010", "2018")
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years)
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1))
+ geom_line() + xlim(years)
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years)
filteredVotes <- completeVotes %>%
filter(vote %in% c("1", "2", "3"))
#Importing and installing required libraries
library(dplyr)
library(ggplot2)
# Loading dataset
load("~/Desktop/Analysing historical voting of the United Nations General Assembly/Dataset/UN-73new.RData")
head(completeVotes)
filteredVotes <- completeVotes %>%
filter(vote %in% c("1", "2", "3"))
year_by_yearYes <- filteredVotes %>%
group_by(year) %>%
summarize(PercentageofYes = mean(vote == 1) * 100)
years <- c("1946", "1950", "1960", "1970", "1980", "1990", "2000", "2010", "2018")
ggplot(year_by_yearYes, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years)
byCountryYes <- filteredVotes %>%
group_by(Countryname) %>%
summarize(Votes = n(), PercentageofYes = mean(vote == 1) * 100)
head(byCountryYes %>% arrange(PercentageofYes))
head(byCountryYes %>% filter(Votes > 200) %>% arrange(desc(PercentageofYes)))
summarizedVotes <- filteredVotes %>% group_by(year, Countryname) %>% summarize(Votes = n(), PercentageofYes = mean(vote == 1) * 100)
Countries <- c("United States of America", "Norway", "India","Germany", "France", "China")
filteredCountry <- summarizedVotes %>% filter(Countryname %in% Countries)
ggplot(filteredCountry, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years) + facet_wrap(~Countryname, scales = "free_y") + theme(axis.text.x = element_text(face="bold", size=07, angle=45))
summary(overall_model)
overall_model <- lm(percent_yes ~ year, year_by_yearYes)
summary(overall_model)
View(year_by_yearYes)
overall_model <- lm(year_by_yearYes$PercentageofYes ~ year, year_by_yearYes)
summary(overall_model)
model_india <- lm(PercentageofYes ~ year, byCountryYes %>% filter(Countryname == "India"))
View(byCountryYes)
View(summarizedVotes)
model_india <- lm(PercentageofYes ~ year, summarizedVotes %>% filter(Countryname == "India"))
summary(overall_model)
model_india <- lm(PercentageofYes ~ year, summarizedVotes %>% filter(Countryname == "India"))
ggplot(filteredCountry, aes(year, PercentageofYes, group = 1)) + geom_line() + xlim(years) + facet_wrap(~Countryname, scales = "free_y") + theme(axis.text.x = element_text(face="bold", size=07, angle=45))
View(filteredVotes)
View(completeVotes)
a <- c(1.2, 2, 3.5, 4)
b <- c(1.2, 2.2, 3.5, 4)
sum(a==b)
xvect <- c(1,2,3)
xvect
height <- c(25,18,40,45,35)
height(5)
height[length]
heighty(length(height))
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
setwd("~/Desktop/Multiple Linear Regression - Backward Elimination - R")
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Manually building the optimal model using Backward Elimination
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State, data = dataset)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State, data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend, data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend, data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend, data = dataset)
summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
